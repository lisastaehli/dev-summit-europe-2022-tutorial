"use strict";(self.webpackChunkberlin_equal_street_names=self.webpackChunkberlin_equal_street_names||[]).push([[3477],{33477:(e,t,i)=>{i.r(t),i.d(t,{FeatureServiceSnappingSource:()=>V});var r=i(36663),s=i(53443),n=i(53280),a=i(23148),o=i(61681),l=i(76868),d=i(81977),h=(i(7753),i(39994),i(7283),i(40266)),u=i(6766),p=i(1983),c=i(96739);function y(e,t){return(0,c.g)(t.extent,f),(0,c.h)(f,(0,u.s)(g,e.x,e.y,0))}const f=(0,c.c)(),g=(0,p.c)();var v=i(42780);let b=class extends s.Z{constructor(e){super(e),this.pointOfInterest=null}get tiles(){const e=this.tilesCoveringView,t=(0,o.pC)(this.pointOfInterest)?this.pointOfInterest:this.view.center;return e.sort(((e,i)=>y(t,e)-y(t,i))),e}_scaleEnabled(){return(0,v.rs)(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||(0,o.Wi)(this.tileInfo))return[];if(!this._scaleEnabled)return[];const{spans:e,lodInfo:t}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:i}=t,r=[];for(const{row:s,colFrom:n,colTo:a}of e)for(let e=n;e<=a;e++){const n={id:null,level:i,row:s,col:t.normalizeCol(e)};this.tileInfo.updateTileInfo(n),r.push(n)}return r}get tileInfo(){return this.view.featuresTilingScheme?.tileInfo??null}get tileSize(){return(0,o.pC)(this.tileInfo)?this.tileInfo.size[0]:256}initialize(){this.own((0,l.YP)((()=>this.view?.state?.viewpoint),(()=>this.notifyChange("tilesCoveringView")),l.Z_))}};(0,r._)([(0,d.Cb)({readOnly:!0})],b.prototype,"tiles",null),(0,r._)([(0,d.Cb)({readOnly:!0})],b.prototype,"_scaleEnabled",null),(0,r._)([(0,d.Cb)({readOnly:!0})],b.prototype,"tilesCoveringView",null),(0,r._)([(0,d.Cb)({readOnly:!0})],b.prototype,"tileInfo",null),(0,r._)([(0,d.Cb)({readOnly:!0})],b.prototype,"tileSize",null),(0,r._)([(0,d.Cb)({constructOnly:!0})],b.prototype,"view",void 0),(0,r._)([(0,d.Cb)({constructOnly:!0})],b.prototype,"layer",void 0),(0,r._)([(0,d.Cb)()],b.prototype,"pointOfInterest",void 0),b=(0,r._)([(0,h.j)("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],b);var w=i(57267);let _=class extends n.r{constructor(e){super(e),this.pointOfInterest=null}get tiles(){const e=this.tilesCoveringView,t=this.effectivePointOfInterest;if((0,o.pC)(t)){const i=e.map((e=>y(t,e)));for(let r=1;r<i.length;r++)if(i[r-1]>i[r])return e.sort(((e,i)=>y(t,e)-y(t,i))),e.slice()}return e}get tilesCoveringView(){return this._filterTiles(this.view.featureTiles?.tiles?.toArray()).map(I)}get tileInfo(){return this.view.featureTiles?.tilingScheme.toTileInfo()??null}get tileSize(){return this.view.featureTiles?.tileSize??256}get effectivePointOfInterest(){const e=this.pointOfInterest;return(0,o.pC)(e)?e:this.view.pointsOfInterest?.focus.location}initialize(){this.handles.add((0,l.YP)((()=>this.view.featureTiles),(e=>{this.handles.remove(C),e&&this.handles.add(e.addClient(),C)}),l.nn))}_filterTiles(e){return(0,o.Wi)(e)?[]:e.filter((e=>Math.abs(e.measures.screenRect[3]-e.measures.screenRect[1])>m&&e.measures.visibility===w.E.VISIBLE_ON_SURFACE))}};function I({lij:[e,t,i],extent:r}){return{id:`${e}/${t}/${i}`,level:e,row:t,col:i,extent:r}}(0,r._)([(0,d.Cb)({readOnly:!0})],_.prototype,"tiles",null),(0,r._)([(0,d.Cb)({readOnly:!0})],_.prototype,"tilesCoveringView",null),(0,r._)([(0,d.Cb)({readOnly:!0})],_.prototype,"tileInfo",null),(0,r._)([(0,d.Cb)({readOnly:!0})],_.prototype,"tileSize",null),(0,r._)([(0,d.Cb)({constructOnly:!0})],_.prototype,"view",void 0),(0,r._)([(0,d.Cb)()],_.prototype,"pointOfInterest",void 0),(0,r._)([(0,d.Cb)()],_.prototype,"effectivePointOfInterest",null),_=(0,r._)([(0,h.j)("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],_);const m=50,C="feature-tiles";var S=i(84713),O=i(44584),k=i(89542),H=i(24568),T=i(49939);let P=class extends T.q{constructor(e){super(e),this.handles=new O.Z}initialize(){const e=setInterval((()=>this._fetchDebugInfo()),2e3);this.handles.add((0,a.kB)((()=>clearInterval(e))))}destroy(){this.handles.destroy()}getTiles(){if(!this.debugInfo)return[];const e=new Map,t=new Map;this.debugInfo.storedTiles.forEach((t=>{e.set(t.data.id,t.featureCount)})),this.debugInfo.pendingTiles.forEach((i=>{e.set(i.data.id,i.featureCount),t.set(i.data.id,i.state)}));const i=i=>{const r=t.get(i),s=e.get(i)??"?";return r?`${r}:${s}\n${i}`:`store:${s}\n${i}`},r=new Map;return this.debugInfo.storedTiles.forEach((e=>{r.set(e.data.id,e.data)})),this.debugInfo.pendingTiles.forEach((e=>{r.set(e.data.id,e.data)})),Array.from(r.values()).map((e=>({lij:[e.level,e.row,e.col],geometry:k.Z.fromExtent((0,H.HH)(e.extent,this.view.spatialReference)),label:i(e.id)})))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then((e=>{this.debugInfo=e,this.update()}))}};(0,r._)([(0,d.Cb)({constructOnly:!0})],P.prototype,"handle",void 0),P=(0,r._)([(0,h.j)("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],P);var E=i(78668),z=i(12916),M=i(59659);let j=class extends n.r{constructor(e){super(e),this.availability=0,this.workerHandleUpdating=!0,this.editId=0}get updating(){return this.updatingHandles.updating||this.workerHandleUpdating}destroy(){this.workerHandle.destroy()}initialize(){this.workerHandle=new x(this.schedule),this.handles.add([this.workerHandle.on("notify-updating",(({updating:e})=>this.workerHandleUpdating=e)),this.workerHandle.on("notify-availability",(({availability:e})=>this._set("availability",e)))])}async setup(e,t){const i=this._serviceInfoFromLayer(e.layer);if((0,o.Wi)(i))return;const r={configuration:this._convertConfiguration(e.configuration),serviceInfo:i,spatialReference:e.spatialReference.toJSON()};await this.updatingHandles.addPromise(this.workerHandle.invokeMethod("setup",r,t)),this.updatingHandles.addPromise(this.workerHandle.invokeMethod("whenNotUpdating",{},t))}async configure(e,t){const i=this._convertConfiguration(e);await this.updatingHandles.addPromise(this.workerHandle.invokeMethod("configure",i,t)),this.updatingHandles.addPromise(this.workerHandle.invokeMethod("whenNotUpdating",{},t))}async refresh(e){await this.updatingHandles.addPromise(this.workerHandle.invokeMethod("refresh",{},e)),this.updatingHandles.addPromise(this.workerHandle.invokeMethod("whenNotUpdating",{},e))}async fetchCandidates(e,t){const i={distance:e.distance,point:e.coordinateHelper.vectorToPoint(e.point).toJSON(),types:e.types,filter:(0,o.pC)(e.filter)?e.filter.createQuery().toJSON():null};return this.workerHandle.invoke(i,t)}async updateTiles(e,t){const i={tiles:e.tiles,tileInfo:(0,o.pC)(e.tileInfo)?e.tileInfo.toJSON():null,tileSize:e.tileSize};await this.updatingHandles.addPromise(this.workerHandle.invokeMethod("updateTiles",i,t)),this.updatingHandles.addPromise(this.workerHandle.invokeMethod("whenNotUpdating",{},t))}async applyEdits(e,t){const i=this.editId++,r={id:i};await this.updatingHandles.addPromise(this.workerHandle.invokeMethod("beginApplyEdits",r,t));const s=await this.updatingHandles.addPromise((0,E.Hl)(e.result,t)),n={id:i,edits:{addedFeatures:s.addedFeatures?.map((({objectId:e})=>e))??[],deletedFeatures:s.deletedFeatures?.map((({objectId:e,globalId:t})=>({objectId:e,globalId:t})))??[],updatedFeatures:s.updatedFeatures?.map((({objectId:e})=>e))??[]}};await this.updatingHandles.addPromise(this.workerHandle.invokeMethod("endApplyEdits",n,t)),this.updatingHandles.addPromise(this.workerHandle.invokeMethod("whenNotUpdating",{},t))}getDebugInfo(e){return this.workerHandle.invokeMethod("getDebugInfo",{},e)}_convertConfiguration(e){return{filter:(0,o.pC)(e.filter)?e.filter.toJSON():null,customParameters:e.customParameters}}_serviceInfoFromLayer(e){return"multipatch"===e.geometryType||"mesh"===e.geometryType?null:{url:e.parsedUrl.path,fields:e.fields.map((e=>e.toJSON())),geometryType:M.Mk.toJSON(e.geometryType),capabilities:e.capabilities,objectIdField:e.objectIdField,globalIdField:e.globalIdField,spatialReference:e.spatialReference.toJSON(),timeInfo:e.timeInfo?.toJSON()}}};(0,r._)([(0,d.Cb)({constructOnly:!0})],j.prototype,"schedule",void 0),(0,r._)([(0,d.Cb)({readOnly:!0})],j.prototype,"updating",null),(0,r._)([(0,d.Cb)({readOnly:!0})],j.prototype,"availability",void 0),(0,r._)([(0,d.Cb)()],j.prototype,"workerHandleUpdating",void 0),j=(0,r._)([(0,h.j)("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],j);class x extends z.q{constructor(e){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated"})}}var F=i(53446),N=i(13054),R=i(81590);let Z=class extends s.Z{constructor(e){super(e),this.pointOfInterest=null}get tiles(){return[{id:"0/0/0",level:0,row:0,col:0,extent:(0,H.al)(-1e8,-1e8,1e8,1e8)}]}get tileInfo(){return new R.Z({origin:new F.Z({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new N.Z({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}};(0,r._)([(0,d.Cb)({readOnly:!0})],Z.prototype,"tiles",null),(0,r._)([(0,d.Cb)({readOnly:!0})],Z.prototype,"tileInfo",null),(0,r._)([(0,d.Cb)({readOnly:!0})],Z.prototype,"tileSize",null),(0,r._)([(0,d.Cb)({constructOnly:!0})],Z.prototype,"layer",void 0),(0,r._)([(0,d.Cb)()],Z.prototype,"pointOfInterest",void 0),Z=(0,r._)([(0,h.j)("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],Z);var U=i(16407);let V=class extends((0,n.p)(s.Z)){constructor(e){super(e)}get updateTilesParameters(){return{tiles:this.tilesOfInterest.tiles,tileInfo:this.tilesOfInterest.tileInfo,tileSize:this.tilesOfInterest.tileSize}}get updating(){return this.workerHandle.updating||this.updatingHandles.updating}get configuration(){return{filter:this.layer.createQuery(),customParameters:this.layer.customParameters}}get availability(){return this.workerHandle.availability}get layer(){return this.layerSource.layer}initialize(){const e=this.view;if((0,o.pC)(e))switch(e.type){case"2d":this.tilesOfInterest=new b({view:e,layer:this.layer}),this.workerHandle=new j;break;case"3d":{const t=e.resourceController;this.tilesOfInterest=new _({view:e}),this.workerHandle=new j({schedule:e=>t.schedule(e)});break}}else this.tilesOfInterest=new Z({layer:this.layer}),this.workerHandle=new j;this.handles.add([(0,a.ed)(this.workerHandle)]),this.workerHandle.setup({layer:this.layer,spatialReference:this.spatialReference,configuration:this.configuration},null),this.updatingHandles.add((()=>this.updateTilesParameters),(()=>this.workerHandle.updateTiles(this.updateTilesParameters,null)),l.nn),this.handles.add([(0,l.YP)((()=>this.configuration),(e=>this.workerHandle.configure(e,null)),l.Z_)]),(0,o.pC)(e)&&this.handles.add((0,l.YP)((()=>U.Z.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES),(t=>{t&&!this.debug?(this.debug=new P({view:e,handle:this.workerHandle}),this.handles.add((0,a.ed)(this.debug),"debug")):!t&&this.debug&&this.handles.remove("debug")}),l.nn)),this.handles.add(this.layerSource.layer.on("apply-edits",(e=>{this.workerHandle.applyEdits(e,null)})))}refresh(){this.workerHandle.refresh(null)}async fetchCandidates(e,t){return this.tilesOfInterest.pointOfInterest=e.coordinateHelper.vectorToPoint(e.point),(await this.workerHandle.fetchCandidates({...e,filter:null},t)).candidates.map((t=>(0,S.X)(t,e.coordinateHelper,e.elevationInfo)))}getDebugInfo(e){return this.workerHandle.getDebugInfo(e)}};(0,r._)([(0,d.Cb)({constructOnly:!0})],V.prototype,"spatialReference",void 0),(0,r._)([(0,d.Cb)({constructOnly:!0})],V.prototype,"layerSource",void 0),(0,r._)([(0,d.Cb)({constructOnly:!0})],V.prototype,"view",void 0),(0,r._)([(0,d.Cb)()],V.prototype,"tilesOfInterest",void 0),(0,r._)([(0,d.Cb)({readOnly:!0})],V.prototype,"updateTilesParameters",null),(0,r._)([(0,d.Cb)({readOnly:!0})],V.prototype,"updating",null),(0,r._)([(0,d.Cb)({readOnly:!0})],V.prototype,"configuration",null),(0,r._)([(0,d.Cb)({readOnly:!0})],V.prototype,"availability",null),V=(0,r._)([(0,h.j)("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],V)},84713:(e,t,i)=>{i.d(t,{X:()=>n});var r=i(46455),s=i(10739);function n(e,t,i){switch(e.type){case"edge":return new r.L({coordinateHelper:t,edgeStart:t.pointToVector(e.start),edgeEnd:t.pointToVector(e.end),targetPoint:t.pointToVector(e.target),objectId:e.objectId,elevationInfo:i});case"vertex":return new s.x({coordinateHelper:t,targetPoint:t.pointToVector(e.target),objectId:e.objectId,elevationInfo:i})}}},49939:(e,t,i)=>{i.d(t,{q:()=>g});var r=i(36663),s=i(30936),n=i(80085),a=i(53443),o=i(19431),l=i(61681),d=i(81977),h=(i(7753),i(39994),i(7283),i(40266)),u=i(60378),p=i(43411),c=i(27624),y=i(69996);const f=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let g=class extends a.Z{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=f.map((e=>new p.Z({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}}))),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=this.getTiles(),t=new Array,i=new Set((this._labels.size,this._labels.keys()));e.forEach(((r,a)=>{const d=r.lij.toString();i.delete(d);const h=r.lij[0],p=r.geometry;if(this.enablePolygons&&!this._polygons.has(d)){const e=new n.Z({geometry:p,symbol:this._symbols[h%this._symbols.length]});this._polygons.set(d,e),t.push(e)}if(this.enableLabels){const i=(e=>{if((0,l.pC)(e.label))return e.label;let t=e.lij.toString();return(0,l.pC)(e.loadPriority)&&(t+=` (${e.loadPriority})`),t})(r),h=a/(e.length-1),f=(0,o.t7)(0,200,h),g=(0,o.t7)(20,6,h)/.75,v=(0,l.pC)(r.loadPriority)&&r.loadPriority>=e.length,b=new s.Z([f,v?0:f,v?0:f]),w="3d"===this.view.type?()=>new u.Z({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new y.Z({text:i,halo:{color:"white",size:1/.75},material:{color:b},size:g})]}):()=>new c.Z({text:i,haloColor:"white",haloSize:1/.75,color:b,size:g});if(this._labels.has(d)){const e=this._labels.get(d),t=w();((0,l.Wi)(e.symbol)||JSON.stringify(t)!==JSON.stringify(e.symbol))&&(e.symbol=t)}else{const e=new n.Z({geometry:p.extent.center,symbol:w()});this._labels.set(d,e),t.push(e)}}}));const r=new Array;i.forEach((e=>{this._polygons.has(e)&&(r.push(this._polygons.get(e)),this._polygons.delete(e)),this._labels.has(e)&&(r.push(this._labels.get(e)),this._labels.delete(e))})),this.view.graphics.removeMany(r),this.view.graphics.addMany(t)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};(0,r._)([(0,d.Cb)({constructOnly:!0})],g.prototype,"view",void 0),(0,r._)([(0,d.Cb)({readOnly:!0})],g.prototype,"updating",void 0),(0,r._)([(0,d.Cb)()],g.prototype,"enabled",null),g=(0,r._)([(0,h.j)("esri.views.support.TileTreeDebugger")],g)}}]);
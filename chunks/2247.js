"use strict";(self.webpackChunkberlin_equal_street_names=self.webpackChunkberlin_equal_street_names||[]).push([[2247],{92247:(e,t,r)=>{r.r(t),r.d(t,{default:()=>S}),r(91957);var s=r(61681),o=r(44924),i=r(34780),a=r(11931),n=r(31329),l=r(18486),c=r(18015),m=r(7928),f=r(78586),u=r(32498),p=r(88243),d=r(91772);class S{convertVectorFieldData(e){const t=i.Z.fromJSON(e.pixelBlock),r=(0,m.KC)(t,e.type);return Promise.resolve((0,s.pC)(r)&&r.toJSON())}async decode(e){const t=await(0,a.J)(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=i.Z.fromJSON(e.pixelBlock),e.extent=e.extent?d.Z.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve((0,s.pC)(t)&&t.toJSON())}async updateSymbolizer(e){this.symbolizer=u.Z.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(i.Z.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve((0,s.pC)(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=(0,c.Hv)(i.Z.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=(0,n.Vl)(i.Z.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach(((e,r)=>{t.set(r,e?.toJSON())})),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map((e=>e?new i.Z(e):null)),r=(0,n.us)(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let o,a=r;return e.coefs&&(a=(0,n.Uk)(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(o=(0,n.Qh)(e.destDimension,e.gcsGrid),a=(0,s.Wg)((0,m.xQ)(a,e.isUV?"vector-uv":"vector-magdir",o))),{pixelBlock:a?.toJSON(),localNorthDirections:o}}async createFlowMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await(0,p.GE)(e.meshType,e.simulationSettings,r,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=d.Z.fromJSON(e.projectedExtent),r=d.Z.fromJSON(e.srcBufferExtent);let s=null;e.datumTransformationSteps&&(s=new o.Z({steps:e.datumTransformationSteps})),(e.includeGCSGrid||(0,l.Mk)(t.spatialReference,r.spatialReference,s))&&await(0,l.zD)();const i=e.rasterTransform?(0,f.c)(e.rasterTransform):null;return(0,l.Qp)({...e,projectedExtent:t,srcBufferExtent:r,datumTransformation:s,rasterTransform:i})}}}}]);